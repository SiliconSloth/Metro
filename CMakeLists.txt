cmake_minimum_required (VERSION 3.10)
set (CMAKE_CXX_STANDARD 17)
set (CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
include(CheckCXXSymbolExists)
project (Metro)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/")
find_package(PCRE2)
find_package(HTTP_Parser)

set(libgitInclude $ENV{LIBGIT_INCLUDE_DIR})
IF (DEFINED libgitInclude)
    include_directories("${libgitInclude}")
ENDIF()
set(libgitBuild $ENV{LIBGIT_BUILD_DIR})

set(libsshBuild $ENV{LIBSSH_BUILD_DIR})
set(opensslRoot $ENV{OPENSSL_ROOT_DIR})

include_directories("include")
add_executable(metro src/main.cpp)

set(BUILD_SHARED_LIBS OFF CACHE BOOL "Build Static Library" FORCE)
add_subdirectory("deps/libssh2" libssh2)

set(USE_SSH CACHE BOOZZL "Manual SSH entry" FORCE)
set(LIBSSH2_FOUND 1)
set(LIBSSH2_INCLUDE_DIRS "${CMAKE_SOURCE_DIR}/deps/libssh2/include")
set(LIBSSH2_LIBRARIES "${CMAKE_BINARY_DIR}/libssh2/src/libssh2.lib")
set(LIBSSH2_LDFLAGS "")
set(USE_BUNDLED_ZLIB ON CACHE BOOL "Use Bundled ZLib" FORCE)
set(BUILD_CLAR OFF CACHE BOOL "Disables Tests" FORCE)
add_subdirectory("deps/libgit2" libgit2)
#target_include_directories(libgit2 "${CMAKE_SOURCE_DIR}/libssh2/include")

IF (WIN32)
#    IF (DEFINED libgitBuild)
#        add_library(git2 STATIC IMPORTED)
#        set_target_properties(git2 PROPERTIES IMPORTED_LOCATION "${libgitBuild}/git2.lib")
#    ENDIF()
#    IF (DEFINED libsshBuild)
#        add_library(libssh2 STATIC IMPORTED)
#        set_target_properties(libssh2 PROPERTIES IMPORTED_LOCATION "${libsshBuild}/libssh2.lib")
#    ENDIF()
    IF (DEFINED opensslRoot)
        add_library(ssl STATIC IMPORTED)
        set_target_properties(ssl PROPERTIES IMPORTED_LOCATION "${opensslRoot}/libssl.lib")
        add_library(crypto STATIC IMPORTED)
        set_target_properties(crypto PROPERTIES IMPORTED_LOCATION "${opensslRoot}/libcrypto.lib")
    ENDIF()
    target_link_libraries(metro git2 libssh2 ssl crypto winhttp Rpcrt4 crypt32)
ENDIF()
IF (UNIX)
    IF (DEFINED libgitBuild)
        add_library(git2 STATIC IMPORTED)
        set_target_properties(git2 PROPERTIES IMPORTED_LOCATION "${libgitBuild}/libgit2.a")
    ENDIF()
    IF (DEFINED libsshBuild)
        add_library(libssh2 STATIC IMPORTED)
        set_target_properties(libssh2 PROPERTIES IMPORTED_LOCATION "${libsshBuild}/libssh2.a")
    ENDIF()

    IF (APPLE)
        target_link_libraries(metro git2 pthread crypto libssh2 iconv "-framework CoreFoundation" "-framework Security")
    ELSE()
        target_link_libraries(metro git2 pthread ssl crypto libssh2 stdc++fs)
        IF (HTTP_PARSER_FOUND)
            target_link_libraries(metro http_parser)
        ENDIF()
    ENDIF()
    IF (PCRE2_FOUND)
        target_link_libraries(metro pcre)
    ENDIF()
ENDIF()
